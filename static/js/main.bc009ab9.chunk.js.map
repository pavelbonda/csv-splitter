{"version":3,"sources":["utils/fileLineIterator.js","utils/splitFile.js","App.js","reportWebVitals.js","index.js"],"names":["fileLineIterator","file","a","utf8Decoder","TextDecoder","stream","type","pipeThrough","DecompressionStream","reader","getReader","read","chunk","value","readerDone","done","decode","re","startIndex","result","exec","remainder","substr","lastIndex","substring","index","length","ROWS_PER_FILE","onPartChange","onFinish","encoder","TextEncoder","writer","writeLine","line","write","encode","closeWriter","close","partFileName","partNumber","name","split","headers","currentPart","currentRow","writableStream","streamSaver","createWriteStream","getWriter","App","fileInput","useRef","useState","isProcessing","setIsProcessing","setCurrentPart","setFile","useEffect","window","onbeforeunload","e","returnValue","onChooseFileClick","useCallback","current","click","onFileChange","target","files","startProcessing","splitFile","Container","className","Jumbotron","ref","accept","hidden","onChange","Button","color","onClick","disabled","Alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc009ab9.chunk.js","sourcesContent":["export default async function* fileLineIterator(file) {\n  const utf8Decoder = new TextDecoder(\"utf-8\");\n\n  let stream = file.stream();\n  if (file.type === \"application/x-gzip\") {\n    /*global DecompressionStream*/\n    stream = stream.pipeThrough(new DecompressionStream(\"gzip\"));\n  }\n  const reader = stream.getReader();\n\n  let { value: chunk, done: readerDone } = await reader.read();\n  chunk = chunk ? utf8Decoder.decode(chunk, { stream: true }) : \"\";\n\n  let re = /\\r\\n|\\n|\\r/gm;\n  let startIndex = 0;\n\n  for (;;) {\n    let result = re.exec(chunk);\n    if (!result) {\n      if (readerDone) {\n        break;\n      }\n      let remainder = chunk.substr(startIndex);\n      ({ value: chunk, done: readerDone } = await reader.read());\n      chunk =\n        remainder + (chunk ? utf8Decoder.decode(chunk, { stream: true }) : \"\");\n      startIndex = re.lastIndex = 0;\n      continue;\n    }\n    yield chunk.substring(startIndex, result.index);\n    startIndex = re.lastIndex;\n  }\n  if (startIndex < chunk.length) {\n    // last line didn't end in a newline char\n    yield chunk.substr(startIndex);\n  }\n}\n","import streamSaver from \"streamsaver\";\nimport fileLineIterator from \"./fileLineIterator\";\n\nconst ROWS_PER_FILE = 900000;\n\nexport default async function splitFile(file, onPartChange, onFinish) {\n  const encoder = new TextEncoder();\n  let writer = null;\n\n  const writeLine = async (writer, line) => {\n    await writer.write(encoder.encode(`${line}\\n`));\n  };\n\n  const closeWriter = (writer) => writer && writer.close();\n\n  const partFileName = (partNumber) =>\n    `${file.name.split(\".\")[0]}_part_${partNumber}.csv`;\n\n  let headers = null;\n  let currentPart = 0;\n  let currentRow = 0;\n\n  for await (let line of fileLineIterator(file)) {\n    if (!headers) {\n      headers = line;\n    } else {\n      if (currentRow >= ROWS_PER_FILE) {\n        currentRow = 0;\n        closeWriter(writer);\n      }\n\n      if (currentRow === 0) {\n        currentPart += 1;\n\n        onPartChange(currentPart);\n\n        let writableStream = streamSaver.createWriteStream(\n          partFileName(currentPart)\n        );\n        writer = writableStream.getWriter();\n\n        await writeLine(writer, headers);\n      }\n\n      currentRow += 1;\n      await writeLine(writer, line);\n    }\n  }\n\n  closeWriter(writer);\n  onFinish();\n}\n","import \"./App.css\";\nimport React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport { Container, Jumbotron, Button, Alert } from \"reactstrap\";\nimport splitFile from \"./utils/splitFile\";\n\nfunction App() {\n  const fileInput = useRef();\n\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [currentPart, setCurrentPart] = useState(null);\n  const [file, setFile] = useState(null);\n\n  useEffect(() => {\n    window.onbeforeunload = (e) => {\n      if (isProcessing) {\n        e.returnValue = `Are you sure you want to leave?`;\n      }\n    };\n  }, [isProcessing]);\n\n  const onChooseFileClick = useCallback(() => {\n    fileInput.current.click();\n  }, []);\n\n  const onFileChange = useCallback(\n    (e) => {\n      setFile(e.target.files[0]);\n    },\n    [setFile]\n  );\n\n  const startProcessing = useCallback(() => {\n    setIsProcessing(true);\n    splitFile(file, setCurrentPart, () => setIsProcessing(false));\n  }, [file, setCurrentPart]);\n\n  return (\n    <Container className=\"mt-5\">\n      <Jumbotron>\n        <h1 className=\"display-3\">CSV Splitter for Excel</h1>\n        <p className=\"lead mb-0\">\n          Excel has a limit of a maximum 1 million rows per file.\n        </p>\n        <p className=\"lead\">\n          This website will split your huge .CSV file into smaller files that\n          Excel can handle.\n        </p>\n        <p className=\"lead\">\n          <b>\n            Please, allow pop-up's since you will be asked to download multiple\n            files.\n          </b>\n        </p>\n        <hr className=\"mb-4\" />\n        {!isProcessing && (\n          <div>\n            <p className=\"lead\">\n              <input\n                type=\"file\"\n                ref={fileInput}\n                accept=\".csv,.gz\"\n                hidden\n                onChange={onFileChange}\n              />\n              <Button\n                color=\"primary\"\n                onClick={onChooseFileClick}\n                className=\"me-2\"\n              >\n                Choose File\n              </Button>\n              {file?.name || \"No File Chosen\"}\n            </p>\n            <p className=\"lead\">\n              <Button\n                color=\"success\"\n                className=\"me-2\"\n                onClick={startProcessing}\n                disabled={!file}\n              >\n                Split File\n              </Button>\n            </p>\n          </div>\n        )}\n        {isProcessing && (\n          <Alert color=\"primary\">\n            Downloading part {currentPart}. Please, don't close this tab.\n          </Alert>\n        )}\n      </Jumbotron>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}