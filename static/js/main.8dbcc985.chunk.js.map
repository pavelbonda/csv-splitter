{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ROWS_PER_FILE","file","onPartChange","onFinish","a","decoder","TextDecoder","encoder","TextEncoder","reader","stream","getReader","headers","currentPart","currentRow","writer","read","done","value","close","textChunk","decode","isChunkEndsWithNewLine","slice","rows","split","shift","i","length","fileStream","streamSaver","createWriteStream","name","join","getWriter","write","encode","App","fileInput","useRef","useState","isProcessing","setIsProcessing","setCurrentPart","setFile","onChooseFileClick","useCallback","current","click","onFileChange","e","target","files","startProcessing","splitFile","Container","className","Jumbotron","type","ref","accept","hidden","onChange","Button","color","onClick","disabled","Alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dbcc985.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState, useCallback, useRef } from \"react\";\nimport { Container, Jumbotron, Button, Alert } from \"reactstrap\";\nimport streamSaver from \"streamsaver\";\n\nconst NO_FILE = \"No File Chosen\";\nconst ROWS_PER_FILE = 900000;\n\nasync function splitFile(file, onPartChange, onFinish) {\n  const decoder = new TextDecoder();\n  const encoder = new TextEncoder();\n\n  let reader = file.stream().getReader();\n\n  let headers = null;\n  let currentPart = 0;\n  let currentRow = 0;\n  let writer = null;\n\n  while (true) {\n    const { done, value } = await reader.read();\n\n    if (done) {\n      onFinish();\n\n      if (writer) {\n        writer.close();\n      }\n\n      break;\n    }\n\n    let textChunk = decoder.decode(value);\n    let isChunkEndsWithNewLine = textChunk.slice(-1) === \"\\n\";\n\n    let rows = textChunk.split(\"\\n\");\n\n    if (!headers) {\n      headers = rows.shift();\n    }\n\n    for (let i = 0; i < rows.length; i++) {\n      if (currentRow >= ROWS_PER_FILE) {\n        currentRow = 0;\n        writer.close();\n      }\n\n      if (currentRow === 0) {\n        currentPart += 1;\n\n        onPartChange(currentPart);\n\n        let fileStream = streamSaver.createWriteStream(\n          `${file.name\n            .split(\".\")\n            .slice(0, -1)\n            .join(\".\")}_part_${currentPart}.csv`\n        );\n        \n        writer = fileStream.getWriter();\n        await writer.write(encoder.encode(`${headers}\\n`));\n      }\n\n      if (i === rows.length - 1 && !isChunkEndsWithNewLine) {\n        await writer.write(encoder.encode(`${rows[i]}`));\n      } else {\n        await writer.write(encoder.encode(`${rows[i]}\\n`));\n      }\n\n      currentRow += 1;\n    }\n  }\n}\n\nfunction App() {\n  const fileInput = useRef();\n\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [currentPart, setCurrentPart] = useState(null);\n  const [file, setFile] = useState(null);\n\n  const onChooseFileClick = useCallback(() => {\n    fileInput.current.click();\n  }, []);\n\n  const onFileChange = useCallback(\n    (e) => {\n      setFile(e.target.files[0]);\n    },\n    [setFile]\n  );\n\n  const startProcessing = useCallback(() => {\n    setIsProcessing(true);\n    splitFile(file, setCurrentPart, () => setIsProcessing(false));\n  }, [file, setCurrentPart]);\n\n  return (\n    <Container className=\"mt-5\">\n      <Jumbotron>\n        <h1 className=\"display-3\">CSV Splitter for Excel</h1>\n        <p className=\"lead mb-0\">\n          Excel has a limit of a maximum 1 million rows per file.\n        </p>\n        <p className=\"lead\">\n          This website will split your huge .CSV file into smaller files that\n          Excel can handle.\n        </p>\n        <p className=\"lead\">\n          <b>\n            Please, allow pop-up's since you will be asked to download multiple\n            files.\n          </b>\n        </p>\n        <hr className=\"mb-4\" />\n        {!isProcessing && (\n          <div>\n            <p className=\"lead\">\n              <input\n                type=\"file\"\n                ref={fileInput}\n                accept=\".csv\"\n                hidden\n                onChange={onFileChange}\n              />\n              <Button\n                color=\"primary\"\n                onClick={onChooseFileClick}\n                className=\"me-2\"\n              >\n                Choose File\n              </Button>\n              {file?.name || NO_FILE}\n            </p>\n            <p className=\"lead\">\n              <Button\n                color=\"success\"\n                className=\"me-2\"\n                onClick={startProcessing}\n                disabled={!file}\n              >\n                Split File\n              </Button>\n            </p>\n          </div>\n        )}\n        {isProcessing && (\n          <Alert color=\"primary\">\n            Downloading part {currentPart}. Please, don't close this tab.\n          </Alert>\n        )}\n      </Jumbotron>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}